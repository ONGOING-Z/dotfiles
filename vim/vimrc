" =============================================================================
"                                      vimrc
" =============================================================================
" 1. 单行注释写在配置右侧
" 2. 逐渐将注释变为全英

" ---------------------------------------------------------Basic Configuration 
" ---- baisc ui config
"
source ~/.vim/plugins.vim
source ~/.vim/plugins_configuration.vim
source ~/.vim/mapping.vim

set shortmess+=atI     " disable startup message
set noshowmode       " hide mode ??
set shell=bash\ -i
set background=dark " set dark scheme
set number
set cc=80          " Display a vertical bar in 80 characters
" String to put at the start of lines that have been wrapped "
let &showbreak='↪ '

let $LANG='en'
let g:indentLine_color_term = 239

set title          " Display filename on tag page.
set showcmd
set autoread       " Auto load when external files have been changed

filetype plugin on " Enable filetype plugins
filetype indent on

" Coding folding depending on the syntax
" Press <za> to fold and unfold
set foldmethod=syntax
set nofoldenable                                " Disable code folding when launching vim

" ---- Searching
set showmatch                                   " Display matching parentheses
set fencs=utf-8,GB18030,ucs-bom,default,latin1  " Encoding configuration
set incsearch                                   " Display the matched results instantly
set hlsearch                                    " Highlight search results

" Gives vim access to a broader range of colors
" Set termguicolors

if has("termguicolors")
    " fix bug for vim
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    " Enable comment italics, but if remove the 2 lines below, italics also
    " works.
    let &t_ZH = "\e[3m"
    let &t_ZR = "\e[23m"

    " enable true color
    set termguicolors
endif

" Ignoring uppercase and lowercase when searching
set ignorecase
set smartcase

" Highlight syntax
syntax enable
syntax on

set list listchars=tab:»·,trail:· " Display extra whitespace
set lcs=eol:¬,nbsp:_

" Save file when it loses focus.
set autowrite

" Disable swap files.
set noswapfile

" ---- From https://secluded.site/vim-as-a-markdown-editor/ ----
" Treat all .md files as markdown
autocmd BufNewFile,BufRead *.md set filetype=markdown
" Hightlight the line the cursor is on
autocmd FileType markdown set cursorline
" Hide and format markdown element like **bold**
autocmd FileType markdown set conceallevel=2

" Set spell check to British English
"autocmd FileType markdown setlocal spell spelllang=en_gb
" Open Goyo for all markdown files
"autocmd FileType markdown Goyo
" ---------

" Limit line length
set textwidth=80
set colorcolumn=1

" Highlight current line
au WinLeave * set nocursorline nocursorcolumn
au WinEnter * set cursorline cursorcolumn
set cursorline

" Softtabs, 4 spaces
set tabstop=4
set shiftwidth=4
set shiftround
set expandtab

" Disable mouse support 
set mouse=

" Encoding open and close
set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936

"let &t_ZH = "\e[3m"
"let &t_ZR = "\e23m"
"highlight Comment cterm=italic gui=italic

"inoremap jk <esc>
"jinoremap <esc> <nop>
"
" template
autocmd BufNewFile *.cpp 0r ~/.vim/template/cppconfig.cpp

" ---- Coc Start----
"set hidden
"set nobackup
"set nowritebackup
"" Give more space for displaying messages.
"set cmdheight=2
"" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
"" delays and poor user experience.
"set updatetime=300
"" Don't pass messages to |ins-completion-menu|.
"set shortmess+=c
"" Always show the signcolumn, otherwise it would shift the text each time
"" diagnostics appear/become resolved.
"if has("patch-8.1.1564")
"  " Recently vim can merge signcolumn and number column into one
"  set signcolumn=number
"else
"  set signcolumn=yes
"endif
"
"" Use tab for trigger completion with characters ahead and navigate.
"" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
"" other plugin before putting this into your config.
"inoremap <silent><expr> <TAB>
"      \ pumvisible() ? "\<C-n>" :
"      \ <SID>check_back_space() ? "\<TAB>" :
"      \ coc#refresh()
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
"
"function! s:check_back_space() abort
"  let col = col('.') - 1
"  return !col || getline('.')[col - 1]  =~# '\s'
"endfunction
"" Use <c-space> to trigger completion.
"inoremap <silent><expr> <c-space> coc#refresh()
"
"" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
"" position. Coc only does snippet and additional edit on confirm.
"" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
"if exists('*complete_info')
"  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
"else
"  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
"endif
"
"" Use `[g` and `]g` to navigate diagnostics
"" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
"nmap <silent> [g <Plug>(coc-diagnostic-prev)
"nmap <silent> ]g <Plug>(coc-diagnostic-next)
"
"" GoTo code navigation.
"nmap <silent> gd <Plug>(coc-definition)
"nmap <silent> gy <Plug>(coc-type-definition)
"nmap <silent> gi <Plug>(coc-implementation)
"nmap <silent> gr <Plug>(coc-references)
"
"" Use K to show documentation in preview window.
"nnoremap <silent> K :call <SID>show_documentation()<CR>
"
"function! s:show_documentation()
"  if (index(['vim','help'], &filetype) >= 0)
"    execute 'h '.expand('<cword>')
"  else
"    call CocAction('doHover')
"  endif
"endfunction
"
"" Highlight the symbol and its references when holding the cursor.
"autocmd CursorHold * silent call CocActionAsync('highlight')
"
"" Symbol renaming.
"nmap <leader>rn <Plug>(coc-rename)
"
"" Formatting selected code.
"xmap <leader>f  <Plug>(coc-format-selected)
"nmap <leader>f  <Plug>(coc-format-selected)
"
"augroup mygroup
"  autocmd!
"  " Setup formatexpr specified filetype(s).
"  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
"  " Update signature help on jump placeholder.
"  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
"augroup end
"
"" Applying codeAction to the selected region.
"" Example: `<leader>aap` for current paragraph
"xmap <leader>a  <Plug>(coc-codeaction-selected)
"nmap <leader>a  <Plug>(coc-codeaction-selected)
"
"" Remap keys for applying codeAction to the current buffer.
"nmap <leader>ac  <Plug>(coc-codeaction)
"" Apply AutoFix to problem on the current line.
"nmap <leader>qf  <Plug>(coc-fix-current)
"
"" Map function and class text objects
"" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
"xmap if <Plug>(coc-funcobj-i)
"omap if <Plug>(coc-funcobj-i)
"xmap af <Plug>(coc-funcobj-a)
"omap af <Plug>(coc-funcobj-a)
"xmap ic <Plug>(coc-classobj-i)
"omap ic <Plug>(coc-classobj-i)
"xmap ac <Plug>(coc-classobj-a)
"omap ac <Plug>(coc-classobj-a)
"
"" Use CTRL-S for selections ranges.
"" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
"nmap <silent> <C-s> <Plug>(coc-range-select)
"xmap <silent> <C-s> <Plug>(coc-range-select)
"
"" Add `:Format` command to format current buffer.
"command! -nargs=0 Format :call CocAction('format')
"
"" Add `:Fold` command to fold current buffer.
"command! -nargs=? Fold :call     CocAction('fold', <f-args>)
"
"" Add `:OR` command for organize imports of the current buffer.
"command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
"
"" Add (Neo)Vim's native statusline support.
"" NOTE: Please see `:h coc-status` for integrations with external plugins that
"" provide custom statusline: lightline.vim, vim-airline.
"set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
"
"" Mappings for CoCList
"" Show all diagnostics.
"nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
"" Manage extensions.
"nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
"" Show commands.
"nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
"" Find symbol of current document.
"nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
"" Search workspace symbols.
"nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
"" Do default action for next item.
"nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
"" Do default action for previous item.
"nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
"" Resume latest coc list.
"nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
" ---- Coc end----

" ------------------------------------------------------------------- Function 
" CompileGcc()
func! CompileGcc()
    if &filetype == 'cpp'
        exec "!time g++ -std=c++11 -Wall % -o %<"
    endif
    if &filetype == 'c'
        exec "!time gcc -Wall % -o %<"
    endif
endfunc
" F9运行已经编译好的文件 20.3.16
map <F9> :call RunGcc()<CR>
func! RunGcc()
    if &filetype == 'cpp'
        exec "!time ./%<"
    endif
    if &filetype == 'c'
        exec "!time ./%<"
    endif
endfunc

" -------------------------------------------------------- filetype detection 
autocmd BufRead *.md set filetype=markdown

" =============================================================================
"                                暂时注释不用
" =============================================================================
" 
" 显示空格并以红色高亮（暂时不用)
"highlight WhitespaceEOL ctermbg=red guibg=red 
"match WhitespaceEOL /\s\+$/

" 在旁边高亮未修改部分
"let g:gitgutter_override_sign_column_highlight = 0
"highlight SignColumn ctermbg=green

" GitGutter Signs' colors and symbols
"highlight GitGutterAdd    guifg=#009900 guibg=#073642 ctermfg=2 ctermbg=0
"highlight GitGutterChange guifg=#bbbb00 guibg=#073642 ctermfg=3 ctermbg=0
"highlight GitGutterDelete guifg=#FF0000 guibg=#073642 ctermfg=1 ctermbg=0

"let g:gitgutter_sign_added = '++'
"let g:gitgutter_sign_modified = '+'
"let g:gitgutter_sign_removed = '--'
"let g:gitgutter_sign_removed_first_line = 'r'
"let g:gitgutter_sign_modified_removed = 'w'
" 禁止光标闪烁
"set gcr=a:block-blinkon0 这种方式没有用，我所使用的平台为ubuntu，需要到
"系统设置 - 键盘下勾选掉，即可。

"-------------
" iab用于编辑模式，实现替换功能
"-------------
" insert into now time
"iab xtime <c-r>=strftime("%Y-%m-%d %H:%M:%S")<cr>
"iab xdate <c-r>=strftime("%Y-%m-%d %a %Y年%j天")<cr>

"-------------
" Hitting space make j and k move faster
"-------------
"nmap <Space>j 10j<Space>
"nmap <Space>k 10k<Space>
"nmap <Space><Space> <Nop> " Hit space again to exits the mode

"-------------
" syntastic
"-------------
" error/warning的图标 
"let g:syntastic_enable_signs = 1 
"let g:syntastic_error_symbol='✗' 
"let g:syntastic_warning_symbol='►'
"let g:syntastic_warning_symbol='⚠ '
" 总是打开Location List（相当于QuickFix）窗口，如果你发现syntastic因为与其他
" 插件冲突而经常崩溃，将下面选项置0
"let g:syntastic_always_populate_loc_list = 1
" 自动打开Locaton List，默认值为2，表示发现错误时不自动打开，当修正以后没有再
" 发现错误时自动关闭，置1表示自动打开自动关闭，0表示关闭自动打开和自动关闭，
" 3表示自动打开，但不自动关闭 
"let g:syntastic_auto_loc_list = 1 
" 修改Locaton List窗口高度
" let g:syntastic_loc_list_height = 5
" 打开文件时自动进行检查 
"let g:syntastic_check_on_open = 1 
" 自动跳转到发现的第一个错误或警告处[not ok, 自动跳转很不好]
" let g:syntastic_auto_jump = 1
" 进行实时检查，如果觉得卡顿，将下面的选项置为1 
"let g:syntastic_check_on_wq = 0 
" 高亮错误
"let g:syntastic_enable_highlighting=1

" Git 并不怎么会看git信息
"Plug 'gregsexton/gitv', {'on': ['Gitv']}
"Plug 'airblade/vim-gitgutter'
"
colorscheme gruvbox " Theme
"let g:gruvbox_contrast_dark='hard'
"
" Enable comment italics
" If you're using a color scheme other than the default, the below line should
" come after the color scheme is loaded in my .vimrc, so that the color scheme
" doesn't override it. 
"    -- https://stackoverflow.com/questions/3494435/vimrc-make-comments-italic
highlight Comment cterm=italic gui=italic
